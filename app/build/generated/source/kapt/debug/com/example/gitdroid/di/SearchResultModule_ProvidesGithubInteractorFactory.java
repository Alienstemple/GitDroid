// Generated by Dagger (https://dagger.dev).
package com.example.gitdroid.di;

import com.example.gitdroid.domain.search.GithubInteractor;
import com.example.gitdroid.domain.search.NetworkRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SearchResultModule_ProvidesGithubInteractorFactory implements Factory<GithubInteractor> {
  private final SearchResultModule module;

  private final Provider<NetworkRepository> networkRepositoryProvider;

  public SearchResultModule_ProvidesGithubInteractorFactory(SearchResultModule module,
      Provider<NetworkRepository> networkRepositoryProvider) {
    this.module = module;
    this.networkRepositoryProvider = networkRepositoryProvider;
  }

  @Override
  public GithubInteractor get() {
    return providesGithubInteractor(module, networkRepositoryProvider.get());
  }

  public static SearchResultModule_ProvidesGithubInteractorFactory create(SearchResultModule module,
      Provider<NetworkRepository> networkRepositoryProvider) {
    return new SearchResultModule_ProvidesGithubInteractorFactory(module, networkRepositoryProvider);
  }

  public static GithubInteractor providesGithubInteractor(SearchResultModule instance,
      NetworkRepository networkRepository) {
    return Preconditions.checkNotNullFromProvides(instance.providesGithubInteractor(networkRepository));
  }
}
