// Generated by Dagger (https://dagger.dev).
package com.example.gitdroid.di;

import com.example.gitdroid.data.NetworkService;
import com.example.gitdroid.domain.search.NetworkRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SearchResultModule_ProvidesNetworkRepositoryFactory implements Factory<NetworkRepository> {
  private final SearchResultModule module;

  private final Provider<NetworkService> networkServiceProvider;

  public SearchResultModule_ProvidesNetworkRepositoryFactory(SearchResultModule module,
      Provider<NetworkService> networkServiceProvider) {
    this.module = module;
    this.networkServiceProvider = networkServiceProvider;
  }

  @Override
  public NetworkRepository get() {
    return providesNetworkRepository(module, networkServiceProvider.get());
  }

  public static SearchResultModule_ProvidesNetworkRepositoryFactory create(
      SearchResultModule module, Provider<NetworkService> networkServiceProvider) {
    return new SearchResultModule_ProvidesNetworkRepositoryFactory(module, networkServiceProvider);
  }

  public static NetworkRepository providesNetworkRepository(SearchResultModule instance,
      NetworkService networkService) {
    return Preconditions.checkNotNullFromProvides(instance.providesNetworkRepository(networkService));
  }
}
